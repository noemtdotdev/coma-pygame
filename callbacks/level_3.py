import pygame
from classes.image import Image
from classes.cursor import Cursor
from classes.popup import Popup
import json
import random

def level_3(main_screen):
    clock = pygame.time.Clock()
    screen_width, screen_height = 1300, 873
    main_screen = pygame.display.set_mode((screen_width, screen_height))  # Update window size
    screen_surface = pygame.Surface((screen_width, screen_height))
    pygame.display.set_caption("Level 3 - Geographie")

    font_path = "assets/font.ttf"
    font_size = 20
    font = pygame.font.Font(font_path, font_size)

    BUTTON_COLOR = (100, 100, 250)
    BUTTON_HOVER_COLOR = (150, 150, 255)
    BACKGROUND_COLOR = (30, 30, 30)
    TEXT_COLOR = (255, 255, 255)

    countries = {
        "die Vereinigten Staaten": [],
        "Kanada": [],
        "Deutschland": [],
        "Österreich": [[(661, 405), (667, 406), (674, 409), (678, 411), (673, 415), (668, 415), (664, 414), (658, 415), (654, 410), (653, 405), (660, 403)]],
        "Frankreich": [[(609, 441), (622, 445), (623, 438), (637, 439), (633, 422), (639, 413), (621, 402), (610, 413), (605, 419), (598, 416), (606, 424), (609, 436)]],
        "Spanien": [[(586, 470), (591, 473), (602, 470), (611, 462), (621, 448), (581, 441), (583, 449), (591, 448), (588, 466)]],
        "Italien": [],
        "Vereinigtes Königreich": [],
        "Russland": [[(741, 434), (750, 441), (764, 444), (773, 450), (780, 450), (773, 439), (777, 430), (781, 420), (773, 416), (776, 403), (788, 399), (797, 404), (802, 406), (805, 404), (808, 402), (812, 402), (815, 404), (819, 405), (822, 402), (824, 400), (820, 398), (820, 395), (821, 391), (823, 387), (830, 385), (841, 381), (849, 377), (853, 377), (857, 383), (859, 386), (863, 388), (868, 386), (873, 384), (880, 388), (885, 397), (890, 403), (897, 404), (903, 408), (909, 412), (914, 413), (920, 409), (927, 404), (934, 404), (942, 406), (948, 407), (949, 403), (952, 398), (961, 400), (964, 404), (969, 406), (977, 406), (984, 408), (991, 410), (1002, 409), (1007, 407), (1015, 410), (1019, 409), (1023, 403), (1024, 399), (1027, 394), (1027, 389), (1037, 389), (1046, 390), (1047, 397), (1050, 405), (1056, 410), (1060, 416), (1065, 419), (1069, 419), (1076, 418), (1075, 425), (1072, 429), (1065, 431), (1064, 439), (1066, 442), (1072, 442), (1078, 436), (1085, 428), (1091, 418), (1095, 410), (1097, 400), (1096, 391), (1094, 388), (1087, 386), (1082, 385), (1078, 380), (1088, 371), (1097, 357), (1100, 352), (1108, 352), (1123, 352), (1129, 348), (1135, 351), (1142, 349), (1144, 344), (1149, 337), (1157, 333), (1161, 335), (1169, 336), (1173, 331), (1179, 329), (1179, 336), (1176, 342), (1170, 347), (1165, 352), (1161, 358), (1157, 362), (1152, 368), (1149, 375), (1148, 385), (1150, 394), (1154, 401), (1169, 383), (1174, 364), (1170, 357), (1174, 352), (1181, 346), (1197, 341), (1213, 331), (1230, 327), (1224, 316), (1215, 314), (1217, 309), (1229, 311), (1242, 299), (1250, 290), (1262, 287), (1265, 281), (1260, 277), (1256, 272), (1249, 275), (1242, 280), (1235, 284), (1232, 277), (1216, 268), (1215, 272), (1200, 266), (1202, 277), (1193, 277), (1187, 271), (1168, 272), (1162, 266), (1162, 262), (1159, 258), (1155, 253), (1142, 253), (1138, 255), (1131, 251), (1126, 246), (1126, 241), (1120, 240), (1114, 246), (1111, 241), (1105, 237), (1096, 237), (1093, 244), (1093, 251), (1085, 253), (1082, 249), (1075, 251), (1076, 254), (1070, 252), (1065, 255), (1056, 252), (1055, 245), (1049, 241), (1046, 239), (1053, 230), (1041, 224), (1040, 228), (1043, 228), (1041, 233), (1034, 234), (1027, 234), (1020, 229), (1015, 224), (1006, 224), (1006, 228), (1001, 230), (1000, 224), (994, 225), (991, 228), (984, 230), (979, 234), (975, 238), (974, 237), (976, 230), (980, 224), (983, 221), (988, 216), (991, 213), (993, 209), (1000, 207), (1002, 200), (1000, 195), (998, 186), (997, 182), (991, 182), (987, 185), (982, 187), (978, 186), (978, 181), (980, 179), (975, 178), (970, 177), (975, 174), (976, 171), (972, 170), (965, 170), (962, 176), (963, 183), (964, 186), (962, 186), (955, 186), (953, 191), (955, 195), (951, 193), (947, 194), (941, 194), (934, 196), (927, 199), (918, 206), (913, 212), (913, 221), (899, 223), (891, 225), (890, 233), (897, 244), (902, 254), (905, 264), (902, 266), (898, 264), (893, 255), (895, 248), (890, 242), (884, 240), (875, 243), (868, 246), (866, 254), (867, 263), (868, 271), (875, 271), (880, 279), (884, 289), (883, 294), (878, 291), (878, 279), (873, 275), (871, 279), (870, 287), (868, 293), (863, 296), (857, 298), (850, 298), (850, 295), (857, 293), (861, 283), (863, 275), (861, 266), (860, 254), (859, 248), (860, 242), (861, 234), (856, 233), (850, 240), (847, 250), (845, 258), (846, 267), (847, 273), (847, 278), (839, 277), (832, 269), (820, 269), (823, 278), (819, 281), (816, 278), (803, 279), (800, 285), (791, 286), (795, 277), (789, 278), (781, 284), (777, 290), (771, 294), (766, 291), (767, 282), (767, 275), (763, 277), (764, 287), (765, 291), (765, 301), (758, 300), (753, 304), (748, 307), (751, 313), (747, 315), (742, 313), (738, 317), (734, 315), (732, 308), (729, 302), (723, 292), (725, 289), (731, 295), (738, 298), (744, 297), (749, 293), (750, 289), (748, 283), (740, 279), (734, 275), (724, 274), (720, 271), (712, 274), (712, 282), (713, 290), (717, 312), (718, 326), (712, 340), (718, 350), (711, 351), (708, 363), (711, 373), (720, 379), (724, 391), (722, 395), (729, 396), (734, 403), (745, 407), (747, 421), (744, 427), (740, 433), (682, 383), (688, 381), (685, 378), (681, 382)], [(741, 434), (750, 441), (764, 444), (773, 450), (780, 450), (773, 439), (777, 430), (781, 420), (773, 416), (776, 403), (788, 399), (797, 404), (802, 406), (805, 404), (808, 402), (812, 402), (815, 404), (819, 405), (822, 402), (824, 400), (820, 398), (820, 395), (821, 391), (823, 387), (830, 385), (841, 381), (849, 377), (853, 377), (857, 383), (859, 386), (863, 388), (868, 386), (873, 384), (880, 388), (885, 397), (890, 403), (897, 404), (903, 408), (909, 412), (914, 413), (920, 409), (927, 404), (934, 404), (942, 406), (948, 407), (949, 403), (952, 398), (961, 400), (964, 404), (969, 406), (977, 406), (984, 408), (991, 410), (1002, 409), (1007, 407), (1015, 410), (1019, 409), (1023, 403), (1024, 399), (1027, 394), (1027, 389), (1037, 389), (1046, 390), (1047, 397), (1050, 405), (1056, 410), (1060, 416), (1065, 419), (1069, 419), (1076, 418), (1075, 425), (1072, 429), (1065, 431), (1064, 439), (1066, 442), (1072, 442), (1078, 436), (1085, 428), (1091, 418), (1095, 410), (1097, 400), (1096, 391), (1094, 388), (1087, 386), (1082, 385), (1078, 380), (1088, 371), (1097, 357), (1100, 352), (1108, 352), (1123, 352), (1129, 348), (1135, 351), (1142, 349), (1144, 344), (1149, 337), (1157, 333), (1161, 335), (1169, 336), (1173, 331), (1179, 329), (1179, 336), (1176, 342), (1170, 347), (1165, 352), (1161, 358), (1157, 362), (1152, 368), (1149, 375), (1148, 385), (1150, 394), (1154, 401), (1169, 383), (1174, 364), (1170, 357), (1174, 352), (1181, 346), (1197, 341), (1213, 331), (1230, 327), (1224, 316), (1215, 314), (1217, 309), (1229, 311), (1242, 299), (1250, 290), (1262, 287), (1265, 281), (1260, 277), (1256, 272), (1249, 275), (1242, 280), (1235, 284), (1232, 277), (1216, 268), (1215, 272), (1200, 266), (1202, 277), (1193, 277), (1187, 271), (1168, 272), (1162, 266), (1162, 262), (1159, 258), (1155, 253), (1142, 253), (1138, 255), (1131, 251), (1126, 246), (1126, 241), (1120, 240), (1114, 246), (1111, 241), (1105, 237), (1096, 237), (1093, 244), (1093, 251), (1085, 253), (1082, 249), (1075, 251), (1076, 254), (1070, 252), (1065, 255), (1056, 252), (1055, 245), (1049, 241), (1046, 239), (1053, 230), (1041, 224), (1040, 228), (1043, 228), (1041, 233), (1034, 234), (1027, 234), (1020, 229), (1015, 224), (1006, 224), (1006, 228), (1001, 230), (1000, 224), (994, 225), (991, 228), (984, 230), (979, 234), (975, 238), (974, 237), (976, 230), (980, 224), (983, 221), (988, 216), (991, 213), (993, 209), (1000, 207), (1002, 200), (1000, 195), (998, 186), (997, 182), (991, 182), (987, 185), (982, 187), (978, 186), (978, 181), (980, 179), (975, 178), (970, 177), (975, 174), (976, 171), (972, 170), (965, 170), (962, 176), (963, 183), (964, 186), (962, 186), (955, 186), (953, 191), (955, 195), (951, 193), (947, 194), (941, 194), (934, 196), (927, 199), (918, 206), (913, 212), (913, 221), (899, 223), (891, 225), (890, 233), (897, 244), (902, 254), (905, 264), (902, 266), (898, 264), (893, 255), (895, 248), (890, 242), (884, 240), (875, 243), (868, 246), (866, 254), (867, 263), (868, 271), (875, 271), (880, 279), (884, 289), (883, 294), (878, 291), (878, 279), (873, 275), (871, 279), (870, 287), (868, 293), (863, 296), (857, 298), (850, 298), (850, 295), (857, 293), (861, 283), (863, 275), (861, 266), (860, 254), (859, 248), (860, 242), (861, 234), (856, 233), (850, 240), (847, 250), (845, 258), (846, 267), (847, 273), (847, 278), (839, 277), (832, 269), (820, 269), (823, 278), (819, 281), (816, 278), (803, 279), (800, 285), (791, 286), (795, 277), (789, 278), (781, 284), (777, 290), (771, 294), (766, 291), (767, 282), (767, 275), (763, 277), (764, 287), (765, 291), (765, 301), (758, 300), (753, 304), (748, 307), (751, 313), (747, 315), (742, 313), (738, 317), (734, 315), (732, 308), (729, 302), (723, 292), (725, 289), (731, 295), (738, 298), (744, 297), (749, 293), (750, 289), (748, 283), (740, 279), (734, 275), (724, 274), (720, 271), (712, 274), (712, 282), (713, 290), (717, 312), (718, 326), (712, 340), (718, 350), (711, 351), (708, 363), (711, 373), (720, 379), (724, 391), (722, 395), (729, 396), (734, 403), (745, 407), (747, 421), (744, 427), (740, 433), (682, 383), (688, 381), (685, 378), (681, 382)]],
        "China": [],
        "Japan": [],
        "Indien": [[(878, 577), (885, 557), (918, 527), (916, 519), (888, 506), (881, 477), (868, 481), (870, 494), (855, 509), (850, 523), (854, 534), (861, 527), (876, 575)]],
        "Brasilien": [[(428, 721), (439, 707), (442, 696), (466, 686), (472, 672), (477, 651), (489, 630), (480, 622), (455, 613), (438, 603), (433, 595), (405, 602), (404, 591), (390, 591), (391, 597), (379, 603), (375, 597), (362, 599), (372, 616), (359, 626), (357, 634), (367, 644), (373, 647), (383, 639), (394, 653), (401, 653), (405, 664), (412, 668), (414, 681), (424, 693), (427, 702), (419, 712), (427, 722)]],
        "Mexiko": [[(1065, 691), (221, 492), (229, 505), (236, 515), (246, 525), (246, 535), (259, 541), (277, 548), (288, 548), (303, 540), (307, 529), (299, 530), (295, 540), (285, 541), (275, 530), (274, 516), (217, 492)]],
        "Australien": [[(1010, 740), (1028, 735), (1038, 734), (1042, 728), (1049, 727), (1061, 723), (1075, 724), (1083, 737), (1089, 730), (1094, 739), (1099, 751), (1103, 757), (1115, 753), (1124, 752), (1130, 741), (1135, 729), (1139, 721), (1141, 712), (1137, 699), (1126, 688), (1119, 680), (1116, 678), (1112, 666), (1109, 659), (1102, 652), (1102, 664), (1099, 673), (1089, 671), (1077, 667), (1081, 657), (1069, 654), (1063, 655), (1060, 664), (1051, 662), (1047, 659), (1039, 670), (1030, 677), (1023, 684), (1012, 687), (1005, 690), (1005, 700), (1006, 714), (1007, 732), (1011, 739), (1019, 740), (1031, 733), (1038, 733), (1040, 731), (1053, 726), (1065, 724), (1078, 730), (1083, 735), (1086, 729), (1094, 739), (1096, 746), (1102, 752), (1109, 754), (1112, 767), (1116, 776), (1123, 766)], [(1010, 740), (1028, 735), (1038, 734), (1042, 728), (1049, 727), (1061, 723), (1075, 724), (1083, 737), (1089, 730), (1094, 739), (1099, 751), (1103, 757), (1115, 753), (1124, 752), (1130, 741), (1135, 729), (1139, 721), (1141, 712), (1137, 699), (1126, 688), (1119, 680), (1116, 678), (1112, 666), (1109, 659), (1102, 652), (1102, 664), (1099, 673), (1089, 671), (1077, 667), (1081, 657), (1069, 654), (1063, 655), (1060, 664), (1051, 662), (1047, 659), (1039, 670), (1030, 677), (1023, 684), (1012, 687), (1005, 690), (1005, 700), (1006, 714), (1007, 732), (1011, 739), (1019, 740), (1031, 733), (1038, 733), (1040, 731), (1053, 726), (1065, 724), (1078, 730), (1083, 735), (1086, 729), (1094, 739), (1096, 746), (1102, 752), (1109, 754), (1112, 767), (1116, 776), (1123, 766)]],
        "Südafrika": [],
        "Ägypten": [],
        "Saudi-Arabien": [],
        "Türkei": [[(642, 579), (747, 418), (750, 408), (733, 405), (726, 394), (714, 399), (696, 396), (695, 406), (691, 417), (702, 419), (710, 416), (716, 427), (727, 423), (738, 425), (744, 419), (748, 419), (749, 415)]],
        "Argentinien": [[(369, 815), (381, 793), (382, 774), (385, 756), (408, 747), (415, 740), (407, 728), (410, 716), (419, 704), (409, 701), (409, 697), (392, 686), (379, 685), (373, 698), (369, 716), (369, 732), (365, 747), (362, 768), (362, 790), (359, 801), (359, 816), (367, 818)]],
        "Nigeria": [[(627, 561), (658, 562), (662, 568), (652, 585), (646, 583), (641, 589), (623, 586), (627, 568), (627, 561), (628, 560)]],
        "Indonesien": [],
        "Südkorea": [[(1054, 465), (1059, 480), (1047, 481), (1049, 469)]],
        "Pakistan": [[(635, 571), (850, 522), (856, 521), (852, 511), (869, 492), (867, 480), (876, 479), (871, 474), (865, 472), (861, 480), (842, 499), (824, 500), (830, 512), (824, 519), (840, 516)]],
    }

    cursor = Cursor()
    country_names = list(countries.keys())
    random.shuffle(country_names)
    current_country_index = 0

    polygons_to_draw = []

    popup = Popup("In diesem Level musst du auf das Land drücken, welches dir angezeigt wird.", 400, 200)

    print_stuff = []
    current_array = []

    running = True
    while running:
        screen_surface.fill(BACKGROUND_COLOR)

        mouse_pos = pygame.mouse.get_pos()
        ok_button = pygame.Rect(screen_width - 60, 20, 40, 40)

        if ok_button.collidepoint(mouse_pos):
            pygame.draw.rect(screen_surface, BUTTON_HOVER_COLOR, ok_button)
            cursor.set_hand_cursor()
        else:
            pygame.draw.rect(screen_surface, BUTTON_COLOR, ok_button)

        overlay_image = Image("assets/overlay_level_3.png", (screen_width, screen_height)).image
        screen_surface.blit(overlay_image, (0, 0))

        ok_text = font.render("X", True, TEXT_COLOR)
        ok_text_rect = ok_text.get_rect(center=ok_button.center)
        screen_surface.blit(ok_text, ok_text_rect)

        if current_country_index < len(country_names):
            current_country = country_names[current_country_index]
            country_text = font.render(f"Drücke auf {current_country}", True, TEXT_COLOR)
            country_text_rect = country_text.get_rect(center=(screen_width // 2, 30))
            screen_surface.blit(country_text, country_text_rect)
        else:
            with open("levels.json", "r") as file:
                levels_data = json.load(file)["levels"]

            levels_data[3]["unlocked"] = True
            levels_data[2]["completed"] = True

            with open("levels.json", "w") as file:
                json.dump({"levels": levels_data}, file)

            running = False

        for polygons in polygons_to_draw:
            for polygon in polygons:
                pygame.draw.polygon(screen_surface, (0, 255, 20), polygon, 1)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if ok_button.collidepoint(mouse_pos):
                    running = False

                if not popup.visible:
                    current_array.append(mouse_pos)

                    current_country = country_names[current_country_index]
                    for polygon in countries[current_country]:
                        if pygame.draw.polygon(screen_surface, (0, 0, 0), polygon, 1).collidepoint(mouse_pos):
                            current_country_index += 1
                            polygons_to_draw.append(countries[current_country])
                            break


            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_n:
                    print_stuff.append(current_array)

                elif event.key == pygame.K_s:
                    print(print_stuff)
                    print_stuff = []
                    current_array = []

            popup.handle_event(event)

        if popup.visible:
            popup.draw(screen_surface)
        else:
            if ok_button.collidepoint(mouse_pos):
                cursor.set_hand_cursor()
            else:
                cursor.default()

        main_screen.blit(screen_surface, (0, 0))
        pygame.display.flip()
        clock.tick(60)

if __name__ == "__main__":
    pygame.init()
    main_screen = pygame.display.set_mode((1300, 873))  # Set initial window size
    level_3(main_screen)
    pygame.quit()